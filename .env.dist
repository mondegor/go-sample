## System readonly vars: ${APPX_DIR}, ${CMD_SEPARATOR}
## System vars:
# MRCMD_PLUGINS_DIR=../mrcmd/plugins
APPX_PLUGINS_DIR=./scripts
#MRCMD_SHARED_PLUGINS_ENABLED=global,pm,go-dev
MRCMD_SHARED_PLUGINS_ENABLED=global,pm,docker,docker-compose,go,go-migrate,nginx,minio,postgres,redis,golangci-lint,plantuml

## Log and debug (required):
APPX_DEBUG=true
APPX_ERR_CALLER_ENABLE=true
APPX_ERR_CALLER_DEPTH=3
APPX_LOG_LEVEL=trace # Log levels: debug, info, warn, error, fatal, trace

## Sentry (required):
APPX_SENTRY_ENABLE=false
APPX_SENTRY_DSN=

## Global vars:
APPX_ID=go-sample
# APPX_VER=v0.0.0
# APPX_ENV=local
# APPX_WORK_DIR=./app
# HOST_USER_ID=1000
# HOST_GROUP_ID=1000
# APPX_TZ=Europe/Moscow

## Docker:
# DOCKER_PACKAGE_NAME = "p/"
# DOCKER_GENERAL_NETWORK=NULL

## Docker Compose:
# DOCKER_COMPOSE_CONFIG_DIR=${MRCMD_PLUGINS_DIR}/docker-compose
# DOCKER_COMPOSE_CONFIG_FILE_LAST=./docker-compose-app.yaml
# DOCKER_COMPOSE_NETWORK=${APPX_ID}-local-network

## Go Dev:
GO_DEV_LOCAL_PACKAGE=github.com/mondegor/go-sample

## Go alpine:
# READONLY_GO_DOCKER_HOST=web-app
# GO_DOCKER_CONTAINER=${APPX_ID}-web-app
# GO_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/go/docker
# GO_DOCKER_DOCKERFILE=NULL
# GO_DOCKER_COMPOSE_CONFIG_DIR=${MRCMD_PLUGINS_DIR}/go/docker-compose
GO_DOCKER_IMAGE=p/go:1.22.5
GO_DOCKER_IMAGE_FROM=golang:1.22.5-alpine3.20
# GO_GOPATH_DIR=./.cache/golang
# GO_APP_ENV_FILE=./.env.app
# GO_APP_MAIN_FILE=./cmd/app/main.go
# GO_WEBAPP_PUBLIC_PORT=127.0.0.1:8080
# GO_WEBAPP_BIND=0.0.0.0
# GO_WEBAPP_PORT=8080
GO_TOOLS_INSTALL_GOIMPORTS_VERSION=false
GO_TOOLS_INSTALL_STATICCHECK_VERSION=false
GO_TOOLS_INSTALL_ERRCHECK_VERSION=false
GO_TOOLS_INSTALL_GOLINT_VERSION=false

## DB migrate utility:
# GO_MIGRATE_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/go-migrate/docker
# GO_MIGRATE_DOCKER_DOCKERFILE=NULL
GO_MIGRATE_DOCKER_IMAGE=p/go-migrate:4.17.1
GO_MIGRATE_DOCKER_IMAGE_FROM=migrate/migrate:v4.17.1
# GO_MIGRATE_DOCKER_NETWORK=${APPX_ID}-local-network
# GO_MIGRATE_DB_URL=POSTGRES_DB_URL
# GO_MIGRATE_DB_TABLE=schema_migrations
# GO_MIGRATE_DB_SRC_DIR=./migrations

## Minio:
# READONLY_MINIO_DOCKER_HOST=s3-minio
# MINIO_DOCKER_CONTAINER=${APPX_ID}-s3-minio
# MINIO_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/minio/docker
# MINIO_DOCKER_DOCKERFILE=NULL
# MINIO_DOCKER_COMPOSE_CONFIG_DIR=${MRCMD_PLUGINS_DIR}/minio/docker-compose
MINIO_DOCKER_IMAGE=p/minio:2024-07-13
MINIO_DOCKER_IMAGE_FROM=minio/minio:RELEASE.2024-07-13T01-46-15Z.fips
# READONLY_MINIO_NGINX_DOCKER_HOST=s3-minio-nginx
# MINIO_NGINX_DOCKER_CONTAINER=${APPX_ID}-s3-minio-nginx
MINIO_NGINX_DOCKER_IMAGE=p/nginx-minio:1.27.0
MINIO_NGINX_DOCKER_IMAGE_FROM=nginx:1.27.0-alpine3.19
# MINIO_API_PUBLIC_PORT=127.0.0.1:9000
# MINIO_API_USER=admin
# MINIO_API_PASSWORD=12345678
# MINIO_WEB_PUBLIC_PORT=127.0.0.1:9984
# MINIO_WEB_DOMAIN=s3-panel.local
# MINIO_WEB_PORT=9001

## Postgres:
# READONLY_POSTGRES_DOCKER_HOST=db-postgres
# POSTGRES_DOCKER_CONTAINER=${APPX_ID}-db-postgres
# POSTGRES_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/postgres/docker
# POSTGRES_DOCKER_DOCKERFILE=NULL
# POSTGRES_DOCKER_COMPOSE_CONFIG_DIR=${MRCMD_PLUGINS_DIR}/postgres/docker-compose
POSTGRES_DOCKER_IMAGE=p/postgres:15.7
POSTGRES_DOCKER_IMAGE_FROM=postgres:15.7-alpine3.20
# POSTGRES_DB_PUBLIC_PORT=127.0.0.1:5432
# POSTGRES_DB_USER=user_pg
# POSTGRES_DB_PASSWORD=123456
# POSTGRES_DB_NAME=db_pg

## Redis:
# READONLY_REDIS_DOCKER_HOST=db-redis
# REDIS_DOCKER_CONTAINER=${APPX_ID}-db-redis
# REDIS_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/redis/docker
# REDIS_DOCKER_DOCKERFILE=NULL
# REDIS_DOCKER_COMPOSE_CONFIG_DIR=${MRCMD_PLUGINS_DIR}/redis/docker-compose
REDIS_DOCKER_IMAGE=p/redis:7.2.5
REDIS_DOCKER_IMAGE_FROM=redis:7.2.5-alpine3.20
# REDIS_PUBLIC_PORT=127.0.0.1:6379
# REDIS_PASSWORD=123456

## GolangCI Lint:
# GOLANGCI_LINT_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/golangci-lint/docker
# GOLANGCI_LINT_DOCKER_DOCKERFILE=NULL
GOLANGCI_LINT_DOCKER_IMAGE=p/golangci-lint:1.59.1
GOLANGCI_LINT_DOCKER_IMAGE_FROM=golangci/golangci-lint:v1.59.1-alpine
# GOLANGCI_GOPATH_DIR=./.cache/golang
# GOLANGCI_LINT_CACHE_DIR=./.cache/golangci-lint

## Plantuml:
# PLANTUML_DOCKER_CONTEXT_DIR=${MRCMD_PLUGINS_DIR}/plantuml/docker
# PLANTUML_DOCKER_DOCKERFILE=NULL
PLANTUML_DOCKER_IMAGE=p/plantuml:1.2024.5
PLANTUML_DOCKER_IMAGE_FROM=plantuml/plantuml:1.2024.5
PLANTUML_SOURCE_DIR=./docs/diagrams
PLANTUML_OUTPUT_IN_DOCKER_DIR=./resources
PLANTUML_OUTPUT_FORMAT=svg