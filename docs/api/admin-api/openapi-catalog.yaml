---
openapi: 3.0.3
info:
  version: 0.3.0
  title: Private API управления каталогом товаров
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  contact:
    name: Andrey Nazarov
  description: |-
    Private REST API проекта go-sample управления каталогом товаров

    ### Пользовательские ограничения полей и ошибки

    #### Ограничения полей
    - required - поле обязательно для заполнения;
    - omitempty - поле может быть не указано (не будет использоваться методом, в который было передано);
    - min=N - поле должно быть не менее N символов;
    - max=N - поле должно быть не более N символов;
    - gte=N - числовое поле должно быть равно или более N;
    - lte=N - числовое поле должно быть равно или менее N;
    - enum - поле должно содержать одно из ENUM значений;
    - pattern=P - поле должно соответствовать регулярному выражению P;

    #### Ошибки
    - ErrVersionInvalid - если передаваемая версия объекта не совпала с текущей версией объекта.\
      Как правило, это означает, что объект был ранее изменён другим процессом;
    - ErrSwitchStatusRejected - перевод в указанный статус объекта отклонён.\
      WorkFlow объекта запрещает переключение в указанный статус;
servers:
  - url: http://localhost:8080/adm
    description: Local Host
tags:
  - name: Catalog.Categories
    description: Private API Categories of product catalog

  - name: Catalog.Products
    description: Private API Products of product catalog

  - name: Catalog.Trademarks
    description: Private API Trademarks of products

paths:
  /v1/catalog/categories:
    get:
      summary: Метод получения списка категорий
      description: Метод предназначен для получения списка всех категорий, сохраненных в БД
      operationId: getCategories
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/App.Request.Query.Filter.SearchText"
        - $ref: "#/components/parameters/App.Request.Query.Filter.Statuses"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortField"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortDirection"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageIndex"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageSize"

      responses:
        "200":
          description: Получен список категорий
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Categories.AdminAPI.Response.Model.CategoryList"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    post:
      summary: Метод добавления новой категории
      description: |-
        Метод предназначен для создания информации о новой категории в БД

        **Ограничения и ошибки полей:**
        - caption: required,max=128
      operationId: createCategory
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Categories.AdminAPI.Request.Model.CreateCategory"

      responses:
        "201":
          description: Информация о категории успешно добавлена
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/App.Response.Model.SuccessCreatedItem"
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/categories/{categoryId}:
    get:
      summary: Метод получения категории
      description: Метод предназначен для получения информации об указанной категории из БД
      operationId: getCategory
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      responses:
        "200":
          description: Получена информация о категории
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Categories.AdminAPI.Response.Model.Category"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    put:
      summary: Метод сохранения категории
      description: |-
        Метод предназначен для сохранения информации об указанной категории в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - caption: required,max=128
      operationId: storeCategory
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Categories.AdminAPI.Request.Model.StoreCategory"

      responses:
        "204":
          description: Информация о категории успешно сохранена
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    delete:
      summary: Метод удаления категории
      description: Метод предназначен для удаления информации об указанной категории из БД
      operationId: removeCategory
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      responses:
        "204":
          description: Информация о категории успешно удалена
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/categories/{categoryId}/status:
    put:
      summary: Метод изменения статуса категории
      description: |-
        Метод предназначен для изменения статуса категории в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - status: required,enum | ErrSwitchStatusRejected
      operationId: changeCategoryStatus
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Request.Model.ChangeStatus"

      responses:
        "204":
          description: Статус категории успешно изменён
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/categories/{categoryId}/image:
    get:
      summary: Метод получения изображения категории
      description: Метод предназначен для получения изображения указанной категории из файлового хранилища
      operationId: getCategoryImage
      tags:
        - Catalog.Categories

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      responses:
        "200":
          description: Получено изображение категории
          content:
            image/png:
              schema:
                $ref: "#/components/schemas/App.Response.Model.BinaryFile"
            image/jpeg:
              schema:
                $ref: "#/components/schemas/App.Response.Model.BinaryFile"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    put:
      summary: Метод загруки/обновления изображения для категории
      description: |-
        Метод предназначен для загруки нового изображения для указанной категории в файловое хранилище.\
        При этом старое изображение удаляется.

        **Ограничения и валидация загрузки:**
        - Загруженная картинка некорректная (битый файл, расширение, ...);
      operationId: uploadCategoryImage
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                categoryImage:
                  description: Бинарный файл с расширением JPEG, PNG
                  type: string
                  format: binary
                  maxLength: 102400 # 100Kb

      responses:
        "204":
          description: Изображение категории было сохранено
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    delete:
      summary: Метод удаления изображения для категории
      description: Метод предназначен для удаления изображения указанной категории из БД
      operationId: removeCategoryImage
      tags:
        - Catalog.Categories

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Categories.AdminAPI.Request.Path.CategoryID"

      responses:
        "204":
          description: Изображение категории успешно удалено
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/products:
    get:
      summary: Метод получения списка товаров категории
      description: Метод предназначен для получения списка всех товаров указанной категории, сохранённых в БД
      operationId: getProducts
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/App.Request.Query.Filter.SearchText"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Query.Filter.CategoryID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Query.Filter.TrademarkIDs"
        - $ref: "#/components/parameters/App.Request.Query.Filter.Statuses"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortField"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortDirection"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageIndex"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageSize"

      responses:
        "200":
          description: Получен список товаров
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Products.AdminAPI.Response.Model.ProductList"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    post:
      summary: Метод добавления нового товара
      description: |-
        Метод предназначен для создания информации о новом товаре в БД

        **Ограничения и ошибки полей:**
        - categoryId: required,gte=1
        - trademarkId: required,gte=1
        - article: required,min=4,max=32,pattern=article
        - caption: required,max=128
        - price: gte=0
      operationId: createProduct
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Products.AdminAPI.Request.Model.CreateProduct"

      responses:
        "201":
          description: Информация о товаре успешно добавлена
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/App.Response.Model.SuccessCreatedItem"
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/products/{productId}:
    get:
      summary: Метод получения товара
      description: Метод предназначен для получения информации о товаре из БД
      operationId: getProduct
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Path.ProductID"

      responses:
        "200":
          description: Получена информация о товаре
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Products.AdminAPI.Response.Model.Product"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    put:
      summary: Метод сохранения товара
      description: |-
        Метод предназначен для сохранения информации о товаре в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - trademarkId: omitempty,gte=1
        - article: omitempty,min=4,max=32,pattern=article
        - caption: omitempty,max=128
        - price: omitempty,gte=0
      operationId: storeProduct
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Path.ProductID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Products.AdminAPI.Request.Model.StoreProduct"

      responses:
        "204":
          description: Информация о товаре успешно сохранена
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    delete:
      summary: Метод удаления товара
      description: Метод предназначен для удаления информации о товаре из БД
      operationId: removeProduct
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Path.ProductID"

      responses:
        "204":
          description: Информация о товаре успешно удалена
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/products/{productId}/status:
    put:
      summary: Метод изменения статуса товара
      description: |-
        Метод предназначен для изменения статуса товара в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - status: required,enum | ErrSwitchStatusRejected
      operationId: changeProductStatus
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Path.ProductID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Request.Model.ChangeStatus"

      responses:
        "204":
          description: Статус товара успешно изменён
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/products/{productId}/move:
    patch:
      summary: Метод перемещения товара
      description: |-
        Метод предназначен для изменения позиции товара в рамках категории в БД

        **Ограничения и валидация:**
        - Не найдено поле, после которого необходимо вставить указанное поле;
      operationId: moveProduct
      tags:
        - Catalog.Products

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Products.AdminAPI.Request.Path.ProductID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Request.Model.MoveItem"

      responses:
        "204":
          description: Статус поля формы успешно изменён
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/trademarks:
    get:
      summary: Метод получения списка торговых марок
      description: Метод предназначен для получения списка всех торговых марок, сохраненных в БД
      operationId: getTrademarks
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/App.Request.Query.Filter.SearchText"
        - $ref: "#/components/parameters/App.Request.Query.Filter.Statuses"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortField"
        - $ref: "#/components/parameters/App.Request.Query.ListSorter.SortDirection"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageIndex"
        - $ref: "#/components/parameters/App.Request.Query.ListPager.PageSize"

      responses:
        "200":
          description: Получен список торговых марок
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Trademarks.AdminAPI.Response.Model.TrademarkList"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    post:
      summary: Метод добавления новой торговой марки
      description: |-
        Метод предназначен для создания информации о новой торговой марки в БД

        **Ограничения и ошибки полей:**
        - caption: required,max=128
      operationId: createTrademark
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Trademarks.AdminAPI.Request.Model.CreateTrademark"

      responses:
        "201":
          description: Информация о торговой марке успешно добавлена
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/App.Response.Model.SuccessCreatedItem"
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/trademarks/{trademarkId}:
    get:
      summary: Метод получения торговой марки
      description: Метод предназначен для получения информации о торговой марке из БД
      operationId: getTrademark
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Trademarks.AdminAPI.Request.Path.TrademarkID"

      responses:
        "200":
          description: Получена информация о торговой марке
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Catalog.Trademarks.AdminAPI.Response.Model.Trademark"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    put:
      summary: Метод сохранения торговой марки
      description: |-
        Метод предназначен для сохранения информации о торговой марке в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - caption: required,max=128
      operationId: storeTrademark
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Trademarks.AdminAPI.Request.Path.TrademarkID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/Catalog.Trademarks.AdminAPI.Request.Model.StoreTrademark"

      responses:
        "204":
          description: Информация о торговой марке успешно сохранена
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

    delete:
      summary: Метод удаления торговой марки
      description: Метод предназначен для удаления информации о торговой марке из БД
      operationId: removeTrademark
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Trademarks.AdminAPI.Request.Path.TrademarkID"

      responses:
        "204":
          description: Информация о торговой марке успешно удалена
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

  /v1/catalog/trademarks/{trademarkId}/status:
    put:
      summary: Метод изменения статуса торговой марки
      description: |-
        Метод предназначен для изменения статуса торговой марки в БД

        **Ограничения и ошибки полей:**
        - version: required,gte=1 | ErrVersionInvalid
        - status: required,enum | ErrSwitchStatusRejected
      operationId: changeTrademarkStatus
      tags:
        - Catalog.Trademarks

      security:
        - bearerAuth: []

      parameters:
        - $ref: "#/components/parameters/App.Request.Header.AcceptLanguage"
        - $ref: "#/components/parameters/App.Request.Header.CorrelationID"
        - $ref: "#/components/parameters/Catalog.Trademarks.AdminAPI.Request.Path.TrademarkID"

      requestBody:
        required: true
        content:
          application/json;charset=UTF-8:
            schema:
              $ref: "#/components/schemas/App.Request.Model.ChangeStatus"

      responses:
        "204":
          description: Статус торговой марки успешно изменён
        "400":
          $ref: "#/components/responses/App.ResponseJson.Error400"
        "401":
          $ref: "#/components/responses/App.ResponseJson.Error401"
        "403":
          $ref: "#/components/responses/App.ResponseJson.Error403"
        "404":
          $ref: "#/components/responses/App.ResponseJson.Error404"
        "500":
          $ref: "#/components/responses/App.ResponseJson.Error5XX"

components:

  parameters:
    App.Request.Header.AcceptLanguage:
      description: https://developer.mozilla.org/ru/docs/Web/HTTP/Headers/Accept-Language
      name: Accept-Language
      in: header
      required: false
      schema:
        type: string
        default: "ru"
      example: "ru;q=0.9, fr-CH, fr;q=0.8, en;q=0.7, *;q=0.5"

    App.Request.Header.CorrelationID:
      description: Уникальный идентификатор запроса
      name: CorrelationID
      in: header
      required: false
      schema:
        type: string
        format: uuid
      example: "f7479171-83d2-4f64-84ac-892f8c0aaf48"

    App.Request.Query.Filter.SearchText:
      description: Поисковая строка
      name: query
      in: query
      required: false
      schema:
        type: string
        maxLength: 128
      example: "перфокарта"

    App.Request.Query.Filter.Statuses:
      description: Список статусов через "," (см. App.Enum.Status)
      name: statuses
      in: query
      required: false
      schema:
        type: string
        default: "ENABLED"
      example: "DRAFT,ENABLED"

    App.Request.Query.ListPager.PageIndex:
      description: Индекс страницы списка с записями
      name: pageIndex
      in: query
      required: false
      schema:
        type: integer
        minimum: 0
        maximum: 1024
        default: 0
      example: 2

    App.Request.Query.ListPager.PageSize:
      description: Количество записей на страницу списка
      name: pageSize
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 1024
        default: 50
      example: 70

    App.Request.Query.ListSorter.SortField:
      description: Название колонки, по которой происходит сортировка
      name: sortField
      in: query
      required: false
      schema:
        type: string
      example: "caption"

    App.Request.Query.ListSorter.SortDirection:
      description: Направление сортировки
      name: sortDirection
      in: query
      required: false
      schema:
        description: |-
          Направление сортировки:
          - ASC - по возрастанию;
          - DESC - по убыванию;
        type: string
        enum:
          - ASC
          - DESC
        default: "ASC"
      example: "DESC"

    Catalog.Categories.AdminAPI.Request.Path.CategoryID:
      description: Идентификатор категории
      name: categoryId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      example: 1000

    Catalog.Products.AdminAPI.Request.Path.ProductID:
      description: Идентификатор товара
      name: productId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      example: 1000

    Catalog.Products.AdminAPI.Request.Query.Filter.CategoryID:
      description: Идентификатор категории
      name: categoryId
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
      example: 1000

    Catalog.Products.AdminAPI.Request.Query.Filter.TrademarkIDs:
      description: Список идентификаторов торговых марок через ","
      name: trademarks
      in: query
      required: false
      schema:
        type: string
      example: "1736,1691"

    Catalog.Trademarks.AdminAPI.Request.Path.TrademarkID:
      description: Идентификатор торговой марки
      name: trademarkId
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      example: 1000

  schemas:
    App.Enum.Status:
      description: |-
        Текущий статус записи:
        - DRAFT - черновик;
        - ENABLED - используется;
        - DISABLED - отключена;
      type: string
      enum:
        - DRAFT
        - ENABLED
        - DISABLED
      example: "ENABLED"

    App.Field.Article:
      description: Уникальный артикул записи (любые буквы без пробелов)
      type: string
      pattern: "^S+$"
      minLength: 2
      maxLength: 64
      example: "item-FLEX-92744"

    App.Field.Caption:
      description: Название записи
      type: string
      maxLength: 128
      example: "Название"

    App.Field.Date.CreatedAt:
      description: Дата и время создания записи (UTC)
      type: string
      format: date-time
      example: "2023-01-01T12:00:00.000+02:00"

    App.Field.Date.UpdatedAt:
      description: Дата и время обновления записи (UTC)
      type: string
      format: date-time
      nullable: true
      example: "2023-01-01T12:00:00.000+02:00"

    App.Field.IntegerID:
      description: Идентификатор записи
      type: integer
      minimum: 1
      example: 1000

    App.Field.ListPager.Total:
      description: Количество записей в БД с учётом указанных в запросе фильтров
      type: integer
      minimum: 0
      example: 584

    App.Field.TagVersion:
      description: Текущая версия записи
      type: integer
      minimum: 1
      example: 5

    App.Measure.Price:
      description: Цена изделия (10^2)
      type: integer # Money
      minimum: 0
      example: 8234500 # 82345 coins

    App.Request.Model.ChangeStatus:
      description: |-
        DTO изменения статуса записи

        Возможные варианты переключений:
        - DRAFT -> ENABLED, DISABLED;
        - ENABLED -> DISABLED;
        - DISABLED -> ENABLED;
      type: object
      required:
        - version
        - status
      properties:
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        status:
          $ref: "#/components/schemas/App.Enum.Status"

    App.Request.Model.MoveItem:
      description: DTO перемещения записи в рамках списка
      type: object
      required:
        - afterId
      properties:
        afterId:
          description: |-
            Идентификатор записи, после которой необходимо вставить указанную запись.\
            При afterId = 0 запись вставляется в начало списка.
          type: integer
          example: 7

    App.Response.Model.BinaryFile:
      description: DTO - бинарный файл
      type: string
      format: binary
      maxLength: 16777216

    App.Response.Model.ErrorList:
      description: DTO списка пользовательских ошибок 400
      type: array
      items:
        $ref: "#/components/schemas/App.Response.Model.ErrorAttribute"

    App.Response.Model.ErrorAttribute:
      description: DTO пользовательской ошибки 400
      type: object
      required:
        - id
        - value
      properties:
        id:
          description: Название атрибута, где произошла ошибка
          type: string
          example: "attributeName"
        value:
          description: Описание ошибки
          type: string
          example: "Атрибут не может быть пустым | Указано недопустимое значение атрибута"

    App.Response.Model.ErrorDetails: # RFC 7807 (Problem Details for HTTP APIs)
      description: DTO следующих ошибок - 401, 403, 404, 5XX
      type: object
      required:
        - title
        - details
        - request
        - time
      properties:
        title:
          description: Краткое описание проблемы, понятное человеку
          type: string
          example: "Resource not found"
        details:
          description: Описание конкретно возникшей ошибки, понятное человеку
          type: string
          example: "Resource [User] with id = [123456] not found. You MUST use PUT to add a resource instead of GET"
        request:
          description: Метод и URL запроса
          type: string
          example: "PUT /users/123456"
        time:
          description: Время возникновения ошибки с точностью до миллисекунд (UTC)
          type: string
          format: date-time
          example: "2023-01-01T12:00:00.000+02:00"
        errorTraceId:
          description: Идентификатор конкретного возникновения ошибки
          type: string
          example: "5add1be1-90ab5d42-02fa8b1f-672503f2"

    App.Response.Model.FileInfo:
      description: DTO - информация о файле
      type: object
      required:
        - originalName
        - size
      properties:
        contentType:
          description: Тип файла
          type: string
          maxLength: 64
          example: "image/png"
        originalName:
          description: Оригинальное название файла
          type: string
          maxLength: 128
          example: "Название"
        size:
          description: Размер файла в байтах
          type: integer
          example: 7

    App.Response.Model.SuccessCreatedItem:
      description: DTO результата создания записи
      type: object
      required:
        - id
      properties:
        id:
          description: Идентификатор созданной записи
          type: integer
          minimum: 1
          example: 1000
        message:
          type: string
          example: "Запись была успешно создана"

    Catalog.Categories.AdminAPI.Request.Model.CreateCategory:
      description: DTO создания категории каталога
      type: object
      required:
        - caption
      properties:
        caption:
          $ref: "#/components/schemas/App.Field.Caption"

    Catalog.Categories.AdminAPI.Request.Model.StoreCategory:
      description: DTO сохранения категории каталога
      type: object
      required:
        - version
        - caption
      properties:
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"

    Catalog.Categories.AdminAPI.Response.Model.CategoryList:
      description: DTO - список категорий каталога
      type: object
      required:
        - items
        - total
      properties:
        items:
          description: Список записей ограниченный фильтром и pageSize
          type: array
          items:
            $ref: "#/components/schemas/Catalog.Categories.AdminAPI.Response.Model.Category"
        total:
          $ref: "#/components/schemas/App.Field.ListPager.Total"

    Catalog.Categories.AdminAPI.Response.Model.Category:
      description: DTO - категория каталога
      type: object
      required:
        - id
        - version
        - createdAt
        - caption
        - status
      properties:
        id: # categoryId
          $ref: "#/components/schemas/App.Field.IntegerID"
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        createdAt:
          $ref: "#/components/schemas/App.Field.Date.CreatedAt"
        updatedAt:
          $ref: "#/components/schemas/App.Field.Date.UpdatedAt"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"
        imageInfo:
          $ref: "#/components/schemas/App.Response.Model.FileInfo"
        status:
          $ref: "#/components/schemas/App.Enum.Status"

    Catalog.Products.AdminAPI.Request.Model.CreateProduct:
      description: DTO создания товара каталога
      type: object
      required:
        - categoryId
        - trademarkId
        - article
        - caption
      properties:
        categoryId:
          $ref: "#/components/schemas/App.Field.IntegerID"
        trademarkId:
          $ref: "#/components/schemas/App.Field.IntegerID"
        article:
          $ref: "#/components/schemas/App.Field.Article"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"
        price:
          $ref: "#/components/schemas/App.Measure.Price"

    Catalog.Products.AdminAPI.Request.Model.StoreProduct:
      description: DTO сохранения товара каталога
      type: object
      required:
        - version
      properties:
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        trademarkId:
          $ref: "#/components/schemas/App.Field.IntegerID"
        article:
          $ref: "#/components/schemas/App.Field.Article"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"
        price:
          $ref: "#/components/schemas/App.Measure.Price"

    Catalog.Products.AdminAPI.Response.Model.ProductList:
      description: DTO - список товаров каталога
      type: object
      required:
        - items
        - total
      properties:
        items:
          description: Список записей ограниченный фильтром и pageSize
          type: array
          items:
            $ref: "#/components/schemas/Catalog.Products.AdminAPI.Response.Model.Product"
        total:
          $ref: "#/components/schemas/App.Field.ListPager.Total"

    Catalog.Products.AdminAPI.Response.Model.Product:
      description: DTO - товар каталога
      type: object
      required:
        - id
        - version
        - createdAt
        - categoryId
        - trademarkId
        - article
        - caption
        - price
        - status
      properties:
        id: # productId
          $ref: "#/components/schemas/App.Field.IntegerID"
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        createdAt:
          $ref: "#/components/schemas/App.Field.Date.CreatedAt"
        updatedAt:
          $ref: "#/components/schemas/App.Field.Date.UpdatedAt"
        categoryId:
          $ref: "#/components/schemas/App.Field.IntegerID"
        trademarkId:
          $ref: "#/components/schemas/App.Field.IntegerID"
        article:
          $ref: "#/components/schemas/App.Field.Article"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"
        price:
          $ref: "#/components/schemas/App.Measure.Price"
        status:
          $ref: "#/components/schemas/App.Enum.Status"

    Catalog.Trademarks.AdminAPI.Request.Model.CreateTrademark:
      description: DTO создания торговой марки
      type: object
      required:
        - caption
      properties:
        caption:
          $ref: "#/components/schemas/App.Field.Caption"

    Catalog.Trademarks.AdminAPI.Request.Model.StoreTrademark:
      description: DTO сохранения торговой марки
      type: object
      required:
        - version
        - caption
      properties:
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"

    Catalog.Trademarks.AdminAPI.Response.Model.TrademarkList:
      description: DTO - список торговых марок
      type: object
      required:
        - items
        - total
      properties:
        items:
          description: Список записей ограниченный фильтром и pageSize
          type: array
          items:
            $ref: "#/components/schemas/Catalog.Trademarks.AdminAPI.Response.Model.Trademark"
        total:
          $ref: "#/components/schemas/App.Field.ListPager.Total"

    Catalog.Trademarks.AdminAPI.Response.Model.Trademark:
      description: DTO - торговая марка
      type: object
      required:
        - id
        - version
        - createdAt
        - caption
        - status
      properties:
        id: # trademarkId
          $ref: "#/components/schemas/App.Field.IntegerID"
        version:
          $ref: "#/components/schemas/App.Field.TagVersion"
        createdAt:
          $ref: "#/components/schemas/App.Field.Date.CreatedAt"
        updatedAt:
          $ref: "#/components/schemas/App.Field.Date.UpdatedAt"
        caption:
          $ref: "#/components/schemas/App.Field.Caption"
        status:
          $ref: "#/components/schemas/App.Enum.Status"

  responses:
    App.ResponseJson.Error400:
      description: Некорректные входные данные. Возвращается список атрибутов с ошибками
      content:
        application/json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/App.Response.Model.ErrorList"

    App.ResponseJson.Error404:
      description: Запрашиваемый ресурс не был найден
      content:
        application/problem+json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/App.Response.Model.ErrorDetails"

    App.ResponseJson.Error5XX:
      description: Внутренняя ошибка сервера
      content:
        application/problem+json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/App.Response.Model.ErrorDetails"

    App.ResponseJson.Error401:
      description: Пользователь не был аутентифицирован
      content:
        application/problem+json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/App.Response.Model.ErrorDetails"

    App.ResponseJson.Error403:
      description: Пользователю с текущими правами доступ отклонён
      content:
        application/problem+json;charset=UTF-8:
          schema:
            $ref: "#/components/schemas/App.Response.Model.ErrorDetails"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT